#include<stdio.h>
#include<stdlib.h>
typedef struct map
{
	int numbervex;
	int numberedge;
	int begin;
	int final;
};
void initearray(int array[100][100],map* G)
{
	for(int i=0;i<=99;i++)
	{
		for(int j=0;j<=99;j++)
		{
			array[i][j]=100;
		}
	}
	for(int i=0;i<=99;i++)
	{
		array[i][i]=0;
	}
	scanf("%d %d",&(G->numbervex),&(G->numberedge));
	int town1;
	int town2;
	int length;
	for(int i=0;i<=G->numberedge-1;i++)
	{
		scanf("%d %d %d",&town1,&town2,&length);
		array[town1][town2]=length;
		array[town2][town1]=length;
	}
	scanf("%d %d",&(G->begin),&(G->final));
}
void initestring(int string[100],map* G)
{
	for(int i=0;i<=G->numbervex-1;i++)
	{
		string[i]=G->begin;
	}
}
void initelength(int length[100],map* G,int array[100][100])
{
	for(int i=0;i<=G->numbervex-1;i++)
	{
		if(i==G->begin)
		{
			length[i]=0;
			continue;
		}
		if(array[i][G->begin]==100)
		{
			length[i]=100;
		}
		else
		{
			length[i]=array[i][G->begin];
		}
	}
}
void Dij(int array[100][100],int string[100],int length[100],map* G,int e)
{
	for(int i=0;i<=G->numbervex-1;i++)
	{
		if(array[e][i]!=0&&array[e][i]!=100)
		{
			if(length[i]>length[e]+array[e][i])
			{
				length[i]=length[e]+array[e][i];
				string[i]=e;
				Dij(array,string,length,G,i);
			}
			
		}
	}
}
int main()
{
	map G;
	int array[100][100];
	int string[100];
	int length[100];
	initearray(array,&G);
	initestring(string,&G);
	initelength(length,&G,array);
	for(int i=0;i<=G.numbervex-1;i++)
	{
		if(array[i][G.begin]!=0&&array[i][G.begin]!=100)
		Dij(array,string,length,&G,i);
	}
	if(length[G.final]!=100)
	printf("%d",length[G.final]);
	else
	printf("-1");
}
