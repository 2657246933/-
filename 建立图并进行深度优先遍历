#include<stdio.h>
typedef struct queue
{
	int data[100];
	int front,rear;
};
typedef struct mgraph
{
	int vesxs[100];
	int arc[100][100];
	int numvesxs,numedge;
};
void pull(queue* Q,int e)
{
		Q->data[Q->rear]=e;
		Q->rear++;
}
void put(queue* Q,int *e)
{
	if(Q->front==Q->rear)
	return ;
	else
	{
		*e=Q->data[Q->front];
		Q->front++;
	}
}
void creatmgraph(mgraph* G)
{
	int i,j,k,w;
	scanf("%d %d",&G->numvesxs,&G->numedge);
	for(k=0;k<=G->numvesxs-1;k++)
	{
		G->vesxs[k]=k;
	}
	for(i=0;i<=G->numvesxs-1;i++)
	{
		for(j=0;j<=G->numvesxs-1;j++)
		G->arc[i][j]=0;
	}
	for(w=0;w<=2*G->numedge-2;w=w+2)
	{
			scanf("%d %d",&i,&j);
			G->arc[i][j]=1;
			G->arc[j][i]=1;
	}
}
void DFS(int i,mgraph G,char visited[])
{
	visited[i]='T';
	int j;
	printf("%d",G.vesxs[i]);
	for(j=0;j<=G.numvesxs-1;j++)
	{
		if(G.arc[i][j]==1&&visited[j]=='F')
		{
			DFS(j,G,visited);
		}
	}
} 
void DFStravel(mgraph G)
{
	int i;
	char visited[100];
	for(i=0;i<=G.numvesxs-1;i++)
	{
		visited[i]='F';
	}
	for(i=0;i<=G.numvesxs-1;i++)
	{
		if(visited[i]=='F')
		{
			DFS(i,G,visited);
		}
	}
}
int main()
{
	mgraph G;
	creatmgraph(&G);
	DFStravel(G);
}
